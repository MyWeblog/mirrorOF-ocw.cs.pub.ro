    
    

<?xml version="1.0" encoding="utf-8"?>
<!-- generator="FeedCreator 1.7.2-ppt DokuWiki" -->
<?xml-stylesheet href="http://ocw.cs.pub.ro/courses/lib/exe/css.php?s=feed" type="text/css"?>
<rdf:RDF
    xmlns="http://purl.org/rss/1.0/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel rdf:about="http://ocw.cs.pub.ro/courses/feed.php">
        <title>CS Open CourseWare iot2015:labs</title>
        <description></description>
        <link>http://ocw.cs.pub.ro/courses/</link>
        <image rdf:resource="http://ocw.cs.pub.ro/courses/lib/tpl/arctic/images/favicon.ico" />
       <dc:date>2016-11-23T13:37:42+02:00</dc:date>
        <items>
            <rdf:Seq>
                <rdf:li rdf:resource="http://ocw.cs.pub.ro/courses/iot2015/labs/01?rev=1466167522&amp;do=diff"/>
                <rdf:li rdf:resource="http://ocw.cs.pub.ro/courses/iot2015/labs/02?rev=1466167522&amp;do=diff"/>
                <rdf:li rdf:resource="http://ocw.cs.pub.ro/courses/iot2015/labs/03?rev=1466167522&amp;do=diff"/>
                <rdf:li rdf:resource="http://ocw.cs.pub.ro/courses/iot2015/labs/04?rev=1466167522&amp;do=diff"/>
                <rdf:li rdf:resource="http://ocw.cs.pub.ro/courses/iot2015/labs/05?rev=1466167522&amp;do=diff"/>
                <rdf:li rdf:resource="http://ocw.cs.pub.ro/courses/iot2015/labs/06?rev=1466167522&amp;do=diff"/>
                <rdf:li rdf:resource="http://ocw.cs.pub.ro/courses/iot2015/labs/07?rev=1466167522&amp;do=diff"/>
                <rdf:li rdf:resource="http://ocw.cs.pub.ro/courses/iot2015/labs/08?rev=1466167522&amp;do=diff"/>
                <rdf:li rdf:resource="http://ocw.cs.pub.ro/courses/iot2015/labs/09?rev=1466167522&amp;do=diff"/>
                <rdf:li rdf:resource="http://ocw.cs.pub.ro/courses/iot2015/labs/10?rev=1466167522&amp;do=diff"/>
                <rdf:li rdf:resource="http://ocw.cs.pub.ro/courses/iot2015/labs/11?rev=1466167522&amp;do=diff"/>
                <rdf:li rdf:resource="http://ocw.cs.pub.ro/courses/iot2015/labs/12?rev=1466167522&amp;do=diff"/>
            </rdf:Seq>
        </items>
    </channel>
    <image rdf:about="http://ocw.cs.pub.ro/courses/lib/tpl/arctic/images/favicon.ico">
        <title>CS Open CourseWare</title>
        <link>http://ocw.cs.pub.ro/courses/</link>
        <url>http://ocw.cs.pub.ro/courses/lib/tpl/arctic/images/favicon.ico</url>
    </image>
    <item rdf:about="http://ocw.cs.pub.ro/courses/iot2015/labs/01?rev=1466167522&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2016-06-17T15:45:22+02:00</dc:date>
        <title>Lab 1: Setting up Edison</title>
        <link>http://ocw.cs.pub.ro/courses/iot2015/labs/01?rev=1466167522&amp;do=diff</link>
        <description>Let's see what you can do with your Intel® Edison board.

Edison mini breakout board

Intel® Edison is a tiny computer that allows you to easily create the Internet of Things projects you always dreamed of. 
It aims at enabling beginners, students, teachers, makers and any technology enthusiast to ease their everyday lives by using systems they've built themselves.</description>
    </item>
    <item rdf:about="http://ocw.cs.pub.ro/courses/iot2015/labs/02?rev=1466167522&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2016-06-17T15:45:22+02:00</dc:date>
        <title>Lab 2: Linux</title>
        <link>http://ocw.cs.pub.ro/courses/iot2015/labs/02?rev=1466167522&amp;do=diff</link>
        <description>Embeded boards run Linux, this is why when interracting with them you might need some basic notions concerning this operating system in case you haven't come across it so far. 

The Shell

The Shell is a window that allows you to interact with the board. It waits for you to enter a command and it executes it. Once you open a Shell, you will see the prompt. That means everything works fine and the Shell is waiting for your command.</description>
    </item>
    <item rdf:about="http://ocw.cs.pub.ro/courses/iot2015/labs/03?rev=1466167522&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2016-06-17T15:45:22+02:00</dc:date>
        <title>Lab 3: Blink a LED</title>
        <link>http://ocw.cs.pub.ro/courses/iot2015/labs/03?rev=1466167522&amp;do=diff</link>
        <description>What you need

	*  One Edison connected to Wyliodrin;
	*  One LED;
	*  One 200 Ohm resistor;
	*  Two male-male jumper wires.

 


The Setup

Connect the LED to the Edison following the schematics in the figure.

You will see, when you look at the LED, that it has two legs. One is longer, that one is usually the anode. The latter has to be plugged into the GPIO pin of the Edison. The shorter leg should to be connected to the resistor and then to the ground pin of the board. 

To understand the an…</description>
    </item>
    <item rdf:about="http://ocw.cs.pub.ro/courses/iot2015/labs/04?rev=1466167522&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2016-06-17T15:45:22+02:00</dc:date>
        <title>Lab 4: Programming with Streams</title>
        <link>http://ocw.cs.pub.ro/courses/iot2015/labs/04?rev=1466167522&amp;do=diff</link>
        <description>Multicolor lamp

Let's replace the simple blinking lamp with a multicolor one.

The purpose of this project is to light up an RGB LED in different colors. In order to achieve this, you need three PWM pins to control the LED and have a say on each of its colors. To work with them, you can add three sliders in the Dashboard and, according on the value they send, to set the intensity of each color.</description>
    </item>
    <item rdf:about="http://ocw.cs.pub.ro/courses/iot2015/labs/05?rev=1466167522&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2016-06-17T15:45:22+02:00</dc:date>
        <title>Lab 5: Connecting Analog Sensors to the board and adding charts</title>
        <link>http://ocw.cs.pub.ro/courses/iot2015/labs/05?rev=1466167522&amp;do=diff</link>
        <description>At the end of this project you will know how to get data from different sensors you can place around your home and display the gathered data on graphs. 

In case you want to use a Raspberry Pi, please note that  you will need to use an Arduino as well. 
No analog pin dependent piece can be used with your Raspberry Pi only. You will need the help of an Arduino board.</description>
    </item>
    <item rdf:about="http://ocw.cs.pub.ro/courses/iot2015/labs/06?rev=1466167522&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2016-06-17T15:45:22+02:00</dc:date>
        <title>Lab 6: Connect and use an LCD</title>
        <link>http://ocw.cs.pub.ro/courses/iot2015/labs/06?rev=1466167522&amp;do=diff</link>
        <description>In this project you are going to connect an LCD to your board and write a short message on it.

What you need

	*   One Edison connected to Wyliodrin;
	*   One 16×2 LCD;
	*   One breadboard;
	*   Sixteen male-male jumper wires;
	*   One potentiometer.</description>
    </item>
    <item rdf:about="http://ocw.cs.pub.ro/courses/iot2015/labs/07?rev=1466167522&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2016-06-17T15:45:22+02:00</dc:date>
        <title>Lab 7: Digital sensors</title>
        <link>http://ocw.cs.pub.ro/courses/iot2015/labs/07?rev=1466167522&amp;do=diff</link>
        <description>You have already used a number of sensors, which you connected to the analog pins. 
You will see now another type of sensor.
This digital sensor provides linearized, calibrated signals in I²C format.

Accelerometer

Wiring

You can connect the accelerometer either by SPI or I2C. 
The easiest way will be the I2C connection. SDA and SCL pins go to the respective ones on the board, GND to Ground and VCC to  3.3V.</description>
    </item>
    <item rdf:about="http://ocw.cs.pub.ro/courses/iot2015/labs/08?rev=1466167522&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2016-06-17T15:45:22+02:00</dc:date>
        <title>Lab 8: Web server</title>
        <link>http://ocw.cs.pub.ro/courses/iot2015/labs/08?rev=1466167522&amp;do=diff</link>
        <description>Request data from a web page

Remember  course 09. Web servers . There you will see that, when you make a request to the server, you need to show it the method, meaning what you expect it to do, which, in the case where you want data to be drown from the web by the server, would be get. Next, you need to tell the server where to get this data from. Any query has the follwoing structure: &lt;http://address:[port]URL?querystring&gt;. Through this query the server will find the data you want and send it …</description>
    </item>
    <item rdf:about="http://ocw.cs.pub.ro/courses/iot2015/labs/09?rev=1466167522&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2016-06-17T15:45:22+02:00</dc:date>
        <title>Lab 9: App Inventor</title>
        <link>http://ocw.cs.pub.ro/courses/iot2015/labs/09?rev=1466167522&amp;do=diff</link>
        <description>Lab 9: App Inventor

Hello Kitty App

Step I: Preparing the environment

	*  set up the computer and the device with Android
	*  open Designer in browser
	*  open Blocks Editor in other tab
	*  connect a phone or an emulator with Android to Blocks Editor</description>
    </item>
    <item rdf:about="http://ocw.cs.pub.ro/courses/iot2015/labs/10?rev=1466167522&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2016-06-17T15:45:22+02:00</dc:date>
        <title>Lab 10: User Interface and User Experience</title>
        <link>http://ocw.cs.pub.ro/courses/iot2015/labs/10?rev=1466167522&amp;do=diff</link>
        <description>Lab 10: User Interface and User Experience

In this laboratory we will try to see different ways we can interact interact programmatically with the interface from javascript.

In order to do these exercises you will need a new phoengap project and the IoT template. Also, in order to make builds, you will need an adobe account to access phonegap build.</description>
    </item>
    <item rdf:about="http://ocw.cs.pub.ro/courses/iot2015/labs/11?rev=1466167522&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2016-06-17T15:45:22+02:00</dc:date>
        <title>Lab 11: Web Services</title>
        <link>http://ocw.cs.pub.ro/courses/iot2015/labs/11?rev=1466167522&amp;do=diff</link>
        <description>Lab 11: Web Services

1) Chat

Using the what you learned in course 11 continue the chat app you started in laboratory 10.
For this you have an api at
&lt;http://api.my-sandbox.co/chat/chat.php&gt;
When you call get on it you will receive all the messages
When you send via post the variables username and msg to it, it will add a message to the chat.
For visibility show only last 5-10 messages. Each message is separated by “\n”</description>
    </item>
    <item rdf:about="http://ocw.cs.pub.ro/courses/iot2015/labs/12?rev=1466167522&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2016-06-17T15:45:22+02:00</dc:date>
        <title>Lab 12: Plugins and Local Storage</title>
        <link>http://ocw.cs.pub.ro/courses/iot2015/labs/12?rev=1466167522&amp;do=diff</link>
        <description>Lab 12: Plugins and Local Storage

You will find information related to the plugins here:
&lt;https://build.phonegap.com/plugins/core&gt;
and here
&lt;http://docs.phonegap.com/en/edge/cordova_plugins_pluginapis.md.html#Plugin%20APIs&gt;

Settings

Create a setting page where the user can change some settings of the app 
(EG: on iPhone if the status bar should be visible or not )
The settings must be persistent. Restarting the app should load the settings at initialization.
Also try building with phonegap bu…</description>
    </item>
</rdf:RDF>
